hyperion_talker.py: test hyperion data process and publish program and annotation removal


This file is for anyone who takes over this project.
It lists all TODO I can think of before completing this project.
See readme.md first to get an overall glance of this project.


undone and unsure:
  1. software limits
  2. ROS node frequency
  3. auto installation bash: env.sh
  4. motor joint values in start-up


ALL:
  1. consider cpp version for better performance.


src/UI.py:
  1. It is user interface developed under PyQt5, and is still just a basic framework.
  2. determine servo number of each motor in Robot and revise axis number in tab2UI
  3. There are a great number of tests remained. Read through the code and complete them one by one.


eye_op_common package:
  1. Confirm yamaha default port;
  2. Omni test.


galil_mixed package:
  galil_overall_listener.py:
    1. test galil connection and command execution.
  galil_command.py:
    1. confirm axis number of last three joints in 'TP' command; default: A, B, C
    # 2. convert return value of 'TP' command to degree;
    3. determine acceleration value; convert cts unit to rad unit
    4. determine speed ratio;
    5. determine speed in cts unit;
    6. determine hardware I/O number of grip and revise grip().


omni_packages folder:
  1. You will have to look through 'omni_state.cpp' to understand what topics and contents it is publishing.
  2. test and figure out what coordinate system does 'omni_state.msg.velocity' refer;
    - implement coordinate transfer in all places that need this velocity info;


yamaha package:
  1. yamaha_listener.py:
    test if serial works fine (message transmission, non-blocking after long-time working);
    transform angles to pulses for robot control;
    velocity transform to joint vel && joint vel to pulses.
  2. yamaha_serial.py:
    test if commands are in right format;
    add any necessary commands according to RCX240 programming manual;
    decide an ideal working frequency - SCARA can complete the increment within one loop;
    - Ideally, we can use 'WHERE' command to retrieve values of all joints from SCARA for jacobian calculation.
    - However, it takes too long to read serial so we assume SCARA completes all our increment command perfectly.
